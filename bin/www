#!/usr/bin/env node
//require("@google-cloud/debug-agent").start();
/**
 * Module dependencies.
 */

const app = require('../app');
const {mongoClient, objectId} = require('../db');
const debug = require('debug')('awesome-filters:server');
const http = require('http');
//const fs = require("fs");
let dbClient;

/**
 * Get port from environment and store in Express.
 */

const port = normalizePort(process.env.PORT || '3000');
app.set('port', port);

/**
 * Create HTTP server.
 */



/**
 * Listen on provided port, on all network interfaces.
 */
/*const httpsOptions = {
  key: fs.readFileSync('./security/localhost+2-key.pem'),
  cert: fs.readFileSync('./security/localhost+2.pem')
};*/

let server;
mongoClient.connect(function(err, client){
  app.locals.collection = client.db("filters").collection("filters");
  server = http.createServer(app);
  if(err) return console.log(err);
  dbClient = client;

  server.listen(port);
  server.on('error', onError);
  server.on('listening', onListening);
});


/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  const port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}
process.on("SIGINT", () => {
  dbClient.close();
  process.exit();
});
